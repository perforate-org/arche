/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as UserUserIdImport } from './routes/user/$userId'
import { Route as ArticleArticleIdImport } from './routes/article/$articleId'

// Create/Update Routes

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UserUserIdRoute = UserUserIdImport.update({
  id: '/user/$userId',
  path: '/user/$userId',
  getParentRoute: () => rootRoute,
} as any)

const ArticleArticleIdRoute = ArticleArticleIdImport.update({
  id: '/article/$articleId',
  path: '/article/$articleId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/solid-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/article/$articleId': {
      id: '/article/$articleId'
      path: '/article/$articleId'
      fullPath: '/article/$articleId'
      preLoaderRoute: typeof ArticleArticleIdImport
      parentRoute: typeof rootRoute
    }
    '/user/$userId': {
      id: '/user/$userId'
      path: '/user/$userId'
      fullPath: '/user/$userId'
      preLoaderRoute: typeof UserUserIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/article/$articleId': typeof ArticleArticleIdRoute
  '/user/$userId': typeof UserUserIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/article/$articleId': typeof ArticleArticleIdRoute
  '/user/$userId': typeof UserUserIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/article/$articleId': typeof ArticleArticleIdRoute
  '/user/$userId': typeof UserUserIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/about' | '/article/$articleId' | '/user/$userId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/article/$articleId' | '/user/$userId'
  id: '__root__' | '/' | '/about' | '/article/$articleId' | '/user/$userId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  ArticleArticleIdRoute: typeof ArticleArticleIdRoute
  UserUserIdRoute: typeof UserUserIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  ArticleArticleIdRoute: ArticleArticleIdRoute,
  UserUserIdRoute: UserUserIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/article/$articleId",
        "/user/$userId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/article/$articleId": {
      "filePath": "article/$articleId.tsx"
    },
    "/user/$userId": {
      "filePath": "user/$userId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
